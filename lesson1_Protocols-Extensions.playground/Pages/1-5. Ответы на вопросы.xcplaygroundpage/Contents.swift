//: [Previous](@previous)
// MARK: - Протоколы и расширения

/// Q: В чем отличие класса от протокола?
/// A:
/// - Протокол:
///  - является образцом методов и свойств
///  - не предоставляет реализацию (с оговорками на protocol extensions for default imp)
///  - лишь описывает, что произойдет и каков будет результат
///  - не может быть инстанциирован и записан в переменную
///  - может быть принят классом, структурой, перечислением (для обеспечения факт. реализации)
///  - "адоптит" или "конформит" протокол – применятеся для объектов, реализующих протокол
///  - можно наследоваться от множественных протоколов
///  - требует указывать возможность получить и изменять описанные свойства
///
///  Класс:
///  - является набором реализованных методов и свойств
///  - сразу предоставляет реализацию ко всему
///  - описывает, что произойдет, какой будет результат и КАК это произойдет
///  - может быть инстанциирован и записан в переменную
///  - наследование только среди классов
///  - "сабклассит" – применятеся для объектов, наследующих некоторый класc
///  - нет множественного наследования
///  - геттеры и сеттеры "синтезируются"

/// Q: могут ли реализовывать несколько протоколов:
/// - a) классы (`Class`) - да
/// - b) структуры (`Struct`) - да,
/// - c) перечисления (`Enum`) - да,
/// - d) кортежи (`Tuples`) - нет, но можно решить:
///
/// 	/// Здесь кортеж заменятется структурой
/// 	struct TupleImp<A, B> {
///
/// 		var firstElement: A
/// 		var secondElement: B
/// 	}
///
/// - 	где А и B – по сути элементы нашего костыльного "кортежа".
/// - 	расширить можно через:
///
/// 	extension TupleImp: <Protocol>, where A: <Protocol>, B: <Protocol> { }
//: [Next](@next)
